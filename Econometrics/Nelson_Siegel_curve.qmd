---
title: "Untitled"
format: html
editor: visual
---

# Loading the data

This code is aimed at further exploring the data we collected through a Nelson-Siegel modelisation of the Yield curve for green and conventional bonds. We derived our own parameters of the curve.

```{r}

library(readr)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
getwd()
df <- read.csv(file.path("..", "data", "Final data for the study", "df_final_7.csv"), stringsAsFactors = FALSE)

#create variable to get the maturity in years
df$maturity_years <- df$days_to_maturity / 365
```

We clean the code the same way we did in python:

```{r}

# --- 1. Define helper function to parse numeric values ---
parse_numeric <- function(x) {
  if (is.na(x)) {
    return(NA_real_)
  }
  # Convert to character and trim whitespace
  x <- trimws(as.character(x))
  # Remove percentage sign if present
  x <- gsub("%", "", x)
  # Replace commas with dots
  x <- gsub(",", ".", x)
  # Convert to numeric (suppress warnings)
  num <- suppressWarnings(as.numeric(x))
  return(num)
}

# --- 3. Clean the numeric columns ---
df$YTM <- sapply(df$YTM, parse_numeric)
df$Coupon <- sapply(df$Coupon, parse_numeric)
# Process "Modified Duration" and divide by 1000
df$Modified.Duration <- sapply(df$Modified.Duration, parse_numeric)/1000


# Check the first 10 rows of the cleaned columns
print(head(df[, c("YTM", "Coupon", "Modified.Duration")], 10))

# --- 4. Display column names ---
print(names(df))

# --- 5. Identify companies with more than one unique ISIN ---
companies <- aggregate(ISIN ~ Company, data = df, FUN = function(x) length(unique(x)))
companies <- companies[companies$ISIN > 1, ]
print(companies)

# --- 6. Identify companies having both green (is_green==1) and conventional (is_green==0) bonds ---
companies_green <- aggregate(is_green ~ Company, data = df, FUN = function(x) length(unique(x)))
companies_green <- companies_green[companies_green$is_green == 2, ]
print(companies_green)

# --- 7. For each matching company, count unique ISINs ---
matching_companies <- list()
for(company in companies_green$Company) {
  group <- df[df$Company == company, ]
  matched <- length(unique(group$ISIN))
  cat(company, ":", matched, "unique ISINs\n")
  matching_companies[[company]] <- matched
}
cat("List of issuers with both green and conventional bonds we will be analysing:\n")
print(names(matching_companies))

# --- 8. Filter the dataframe to include only these companies ---
df_for_matching <- df[df$Company %in% names(matching_companies), ]

# Print dimensions and counts
print(dim(df_for_matching))
cat("Unique ISINs:", length(unique(df_for_matching$ISIN)), "\n")
cat("Unique Companies:", length(unique(df_for_matching$Company)), "\n")
cat("Unique green bonds (is_green == 1):", length(unique(df_for_matching$ISIN[df_for_matching$is_green == 1])), "\n")

# --- 9. Overview of the currencies used ---
unique_currencies <- unique(df_for_matching$Emissionswährung)
for(currency in unique_currencies) {
  cat("Currency:", currency, "\n")
  # Count unique ISINs for this currency in the full dataset
  cat("Unique ISINs in df:", length(unique(df$ISIN[df$Emissionswährung == currency])), "\n")
}

# --- 10. Keep only rows with EUR as currency ---
df_for_matching <- df_for_matching[df_for_matching$Emissionswährung == "EUR", ]
print(dim(df_for_matching))

# --- 11. Convert DateTime to a date-time object and sort ---
df_for_matching$DateTime <- as.POSIXct(df_for_matching$DateTime, format="%Y-%m-%d %H:%M:%S", tz="UTC")
df_for_matching <- df_for_matching[order(df_for_matching$DateTime), ]
rownames(df_for_matching) <- NULL

names(df_for_matching)[names(df_for_matching) == "Modified.Duration"] <- "modified_duration"
names(df_for_matching)[names(df_for_matching) == "Last.Price"] <- "last_price"

# Check the column names and first few rows of the sorted data
print(names(df_for_matching))
print(head(df_for_matching))

# --- 12. Write the cleaned data to a CSV file ---
# write.csv(df_for_matching, "df_for_matching.csv", row.names = FALSE)
```

You can add options to executable code like this

```{r}
library(dplyr)
library(tidyr)
library(ggplot2)

#in case if needed
url_ecb = file.path("..", "Econometrics", "Nelson-Siegel data ECB.csv") 
df_ECB <- read.csv(url_ecb, stringsAsFactors = FALSE)
# we analyse the unique title values to then extract the factors
write.csv(df_ECB |> filter(TIME_PERIOD == "2025-01-03") |> select(TITLE), "./unique_title_values.csv")
```

We will test plot the ECB curve for one given day, say for 2025-01-03

```{r}
date_filter <- "2025-01-03"

# Filter and mutate your data
df_date <- df_ECB |>
  filter(TIME_PERIOD == date_filter)

df_date <- df_date |>
  mutate(Parameter = case_when(
    grepl("BETA0", DATA_TYPE_FM, ignore.case = TRUE) ~ "Beta0",
    grepl("BETA1", DATA_TYPE_FM, ignore.case = TRUE) ~ "Beta1",
    grepl("BETA2", DATA_TYPE_FM, ignore.case = TRUE) ~ "Beta2",
    grepl("BETA3", DATA_TYPE_FM, ignore.case = TRUE) ~ "Beta3",
    grepl("TAU1", DATA_TYPE_FM, ignore.case = TRUE) ~ "Tau1",
    grepl("TAU2", DATA_TYPE_FM, ignore.case = TRUE) ~ "Tau2",
    TRUE ~ NA_character_
  )) %>%
  filter(!is.na(Parameter))

# Pivot the data so that each parameter is in its own column
params <- df_date %>%
  select(Parameter, OBS_VALUE) %>%
  pivot_wider(names_from = Parameter, values_from = OBS_VALUE)

# Convert parameter values to numeric
params <- params %>% mutate(across(everything(), as.numeric))

# If the dataset does not include the time-decay parameters (Tau1 and Tau2),
# you can set them to reasonable defaults (for example, 1 and 3 years)
if(!"Tau1" %in% names(params)) {
  params$Tau1 <- 1.0
}
if(!"Tau2" %in% names(params)) {
  params$Tau2 <- 3.0
}

# Define the Svensson yield curve function
sven_yield <- function(tau, beta0, beta1, beta2, beta3, tau1, tau2) {
  # Handle the tau==0 case to avoid division by zero (using the limit values)
  term1 <- ifelse(tau == 0, 1, (1 - exp(-tau / tau1)) / (tau / tau1))
  term2 <- ifelse(tau == 0, 0, term1 - exp(-tau / tau1))
  term3 <- ifelse(tau == 0, 0, (1 - exp(-tau / tau2)) / (tau / tau2) - exp(-tau / tau2))
  yield <- beta0 + beta1 * term1 + beta2 * term2 + beta3 * term3
  return(yield)
}

# Create a sequence of maturities (in years) over which to plot the yield curve.
# (For example, from 0.1 to 30 years.)
maturities <- seq(0.1, 30, by = 0.1)

# Compute the yield at each maturity using the Svensson function.
# The parameter values are taken from the pivoted 'params' data frame.
yields <- sven_yield(maturities,
                     beta0 = params$Beta0,
                     beta1 = params$Beta1,
                     beta2 = params$Beta2,
                     beta3 = params$Beta3,
                     tau1  = params$Tau1,
                     tau2  = params$Tau2)

# Create a data frame for plotting
yield_curve_df <- data.frame(Maturity = maturities, Yield = yields)

# Plot the yield curve using ggplot2
ggplot(yield_curve_df, aes(x = Maturity, y = Yield)) +
  geom_line(size = 1) +
  labs(title = paste("Yield Curve on", date_filter),
       x = "Maturity (Years)",
       y = "Yield (%)") +
  theme_minimal()
```

# Bond data subset for 1 day

```{r}

library(lubridate)

df_subset <- df_for_matching |> filter(Date == "03/01/2025")

# per date we take the last available price
df_subset <- df_subset %>%
  arrange(WKN, desc(Date)) %>%
  group_by(WKN) %>%
  slice(1) %>%  
  ungroup()
```

# We overlay ECB curve with our bond curve

```{r}
library(tidyverse)

#valuation_date <- as.Date("2025-01-03")
# df_subset already has maturity_years

# we remove any sovereigns that jumped through the initial filtering
df_subset <- df_subset %>%
  filter(Company != "ungarn republik") |>
  filter(maturity_years <= 30)

# for later
df_for_matching <- df_for_matching %>%
  filter(Company != "ungarn republik") |>
  filter(maturity_years <= 30)

# We recalculate YTM to see if there are differences as a robustness check
calc_ytm <- function(price,
                     coupon_rate,
                     maturity_years,
                     face_value = 100,
                     freq = 1) {
  # price:        bond price (clean price) per 100 of face value
  # coupon_rate:  annual coupon rate in decimal form, e.g. 0.05 for 5%
  # maturity_years: time to maturity in years (could be fractional)
  # face_value:   redemption value (usually 100)
  # freq:         number of coupon payments per year (1 = annual, 2 = semiannual, etc.)

  # Number of coupon payments
  n <- freq * maturity_years
  
  # Coupon payment each period
  cpn <- (coupon_rate / 100) * face_value / freq
  
  # Define a function whose root is the YTM
  f <- function(y) {
    # Present value of all coupon payments
    # For each period t = 1..n, discount the coupon
    pv_coupons <- sum( cpn / (1 + y/freq)^(1:n) )
    
    # Present value of the final redemption (face value)
    pv_redemption <- face_value / (1 + y/freq)^n
    
    # The difference between the calculated PV and the actual market price
    (pv_coupons + pv_redemption) - price
  }
  
  # Use uniroot to solve f(y) = 0 for y in [0, 1] (i.e. 0% to 100% yield)
  # Adjust the interval if your yields are extremely high/low.
  tryCatch({
    root <- uniroot(f, interval = c(0, 1))$root
    return(root)
  }, error = function(e) {
    # If uniroot fails, return NA or handle as you prefer
    return(NA_real_)
  })
}

df_subset <- df_subset %>%
  mutate(
    # If Coupon is in percentage (e.g. 3 for 3%), do:
    # Coupon = Coupon / 100,

    # Calculate the YTM by calling calc_ytm row by row
    YTM_new = mapply(
      calc_ytm,
      price          = last_price,
      coupon_rate    = Coupon,
      maturity_years = maturity_years,
      MoreArgs = list(face_value = 100, freq = 1)
    )
  )
df_subset$YTM_new <- df_subset$YTM_new * 100

# 3) Plot the ECB curve and your bond yields on the same chart
ggplot() +
  # (a) The ECB curve as a line
  geom_line(data = yield_curve_df,
            aes(x = Maturity, y = Yield),
            color = "blue",
            size  = 1) +
  # (b) Your bond data (red points)
  geom_point(data = df_subset,
             aes(x = maturity_years, y = YTM),
             color = "red",
             size  = 2) +
  # (c) Your bond data again (gray points)
  geom_point(data = df_subset,
             aes(x = maturity_years, y = YTM_new),
             color = "grey",
             size  = 1) +
  labs(
    title   = "Nelson–Siegel Yield Curve vs. Actual Bond Yields",
    x       = "Maturity (years)",
    y       = "Yield (%)",
    caption = "Blue line: ECB Nelson–Siegel curve\nRed points: Bond yields from df_subset"
  ) +
  theme_minimal()
```

we recalculate YTM as there seems to be an issuer with some entries. this calculation produces yields that are across the board slightly lower. but also seemingly too low. We stay with our previous calculation and remove the sovereign bonds that made it into our dataset.

## Differentiating between green and conventional bonds

```{r}

# using is_green in df_subset
ggplot() +
  # (a) The ECB curve as a line (blue)
  geom_line(
    data  = yield_curve_df,
    aes(x = Maturity, y = Yield),
    color = "blue",
    size  = 1
  ) +
  # (b) Your bond data (YTM) as points, colored by bond_type
  geom_point(
    data = df_subset,
    aes(x = maturity_years, y = YTM, color = as.factor(is_green)),
    size = 2
  ) +
  labs(
    title   = "Nelson–Siegel Yield Curve vs. Actual Bond Yields",
    x       = "Maturity (years)",
    y       = "Yield (%)",
    color   = "Bond Type",  # Legend title
    caption = "Blue line: ECB Nelson–Siegel curve\nPoints: Bond yields from df_subset"
  ) +
  theme_minimal()
```

## Plot average yield curves

still for just the day, we will then average over all the days later. We first compute daily averages

```{r}
# we fit smoothing splines

# Split data into two subsets
df_green <- df_subset %>% filter(is_green == 1)
df_conv  <- df_subset %>% filter(is_green == 0)

# Fit smoothing spline for green bonds
fit_green <- smooth.spline(
  x = df_green$maturity_years,
  y = df_green$YTM,
  spar = 1 # optional: adjust smoothing parameter
)

# Fit smoothing spline for conventional bonds
fit_conv <- smooth.spline(
  x = df_conv$maturity_years,
  y = df_conv$YTM,
  spar = 1
)

# Create a grid of maturities
maturity_grid <- seq(
  from = min(df_subset$maturity_years),
  to   = max(df_subset$maturity_years),
  length.out = 200
)

# Predict on the grid
pred_green <- predict(fit_green, x = maturity_grid)
pred_conv  <- predict(fit_conv,  x = maturity_grid)

# Build data frames for plotting
df_spline_green <- data.frame(
  maturity = pred_green$x,
  yield    = pred_green$y,
  type     = "Green"
)
df_spline_conv <- data.frame(
  maturity = pred_conv$x,
  yield    = pred_conv$y,
  type     = "Conventional"
)

# Combine
df_spline_all <- rbind(df_spline_green, df_spline_conv)

ggplot() +
  # Points for all bonds
  geom_point(
    data = df_subset,
    aes(x = maturity_years, y = YTM, color = factor(is_green)),
    alpha = 0.6,
    size  = 2
  ) +
  # Smoothed spline lines
  geom_line(
    data = df_spline_all,
    aes(x = maturity, y = yield, color = type),
    size = 1
  ) +
  labs(
    title = "Green vs. Conventional Bond Yields (Smoothed by Maturity)",
    x     = "Maturity (years)",
    y     = "Yield (%)",
    color = "Bond Type"
  ) +
  theme_minimal()
```

# Plot for whole time period

we now extend our yield curve plot for the whole time period, plotting our bond yields relative to the Nelson-Siegel Curve given by the ECB (European Sovereign Bonds). We go back to using a simple average.

```{r}
# 1) Suppose df_for_matching has bond data with multiple entries per date/bond:
#    We first keep only the last bond yield per (Date, WKN).
df_for_matching_clean <- df_for_matching %>%
  arrange(Date, WKN) %>%
  group_by(Date, WKN) %>%
  slice_tail(n = 1) %>%
  ungroup()

df_ECB <- df_ECB %>%
  mutate(Date = as.Date(TIME_PERIOD))  

# 2) Identify parameters
df_ECB <- df_ECB %>%
  mutate(Parameter = case_when(
    grepl("BETA0", DATA_TYPE_FM, ignore.case = TRUE) ~ "Beta0",
    grepl("BETA1", DATA_TYPE_FM, ignore.case = TRUE) ~ "Beta1",
    grepl("BETA2", DATA_TYPE_FM, ignore.case = TRUE) ~ "Beta2",
    grepl("BETA3", DATA_TYPE_FM, ignore.case = TRUE) ~ "Beta3",
    grepl("TAU1",  DATA_TYPE_FM, ignore.case = TRUE) ~ "Tau1",
    grepl("TAU2",  DATA_TYPE_FM, ignore.case = TRUE) ~ "Tau2",
    TRUE ~ NA_character_
  )) %>%
  filter(!is.na(Parameter))

# 3) Pivot wider: one row per Date, columns = Beta0..Tau2
df_ECB_wide <- df_ECB %>%
  select(Date, Parameter, OBS_VALUE) %>%
  pivot_wider(names_from = Parameter, values_from = OBS_VALUE)

# 4) Convert parameter values to numeric
df_ECB_wide <- df_ECB_wide %>%
  mutate(across(c(Beta0, Beta1, Beta2, Beta3, Tau1, Tau2), as.numeric))

# 5) If Tau1 or Tau2 missing, set defaults
df_ECB_wide <- df_ECB_wide %>%
  mutate(
    Tau1 = if_else(is.na(Tau1), 1.0, Tau1),
    Tau2 = if_else(is.na(Tau2), 3.0, Tau2)
  )
# 2) Suppose df_ECB_wide has the ECB Svensson parameters, 1 row per Date:
#    (Date, Beta0, Beta1, Beta2, Beta3, Tau1, Tau2)

df_for_matching_clean <- df_for_matching_clean %>%
  mutate(Date = as.Date(Date, format = "%d/%m/%Y"))

#    We do an INNER JOIN to keep only dates that appear in both sets.
df_merged <- df_for_matching_clean %>%
  # Remove any outliers or unwanted rows, e.g. maturity > 30
  filter(maturity_years <= 30) %>%
  # Now join so we only keep rows with valid ECB data
  inner_join(df_ECB_wide, by = "Date")

# 3) Compute the ECB yield for each bond's maturity, then the difference
sven_yield <- function(tau, beta0, beta1, beta2, beta3, tau1, tau2) {
  term1 <- ifelse(tau == 0, 1, (1 - exp(-tau / tau1)) / (tau / tau1))
  term2 <- ifelse(tau == 0, 0, term1 - exp(-tau / tau1))
  term3 <- ifelse(tau == 0, 0, (1 - exp(-tau / tau2)) / (tau / tau2) - exp(-tau / tau2))
  beta0 + beta1 * term1 + beta2 * term2 + beta3 * term3
}

df_merged <- df_merged %>%
  mutate(
    ecb_yield = sven_yield(
      tau   = maturity_years,
      beta0 = Beta0,
      beta1 = Beta1,
      beta2 = Beta2,
      beta3 = Beta3,
      tau1  = Tau1,
      tau2  = Tau2
    ),
    diff = YTM - ecb_yield
  )

# 4) Remove rows with missing or infinite values in diff or maturity_years
df_merged <- df_merged %>%
  filter(!is.na(diff), !is.na(maturity_years)) %>%
  filter(is.finite(diff), is.finite(maturity_years))

# 5) Split into green vs. conventional if you want separate smoothing
df_green <- df_merged %>% filter(is_green == 1)
df_conv  <- df_merged %>% filter(is_green == 0)

# 6) Fit smoothing splines (adjust 'spar' as needed)
fit_green <- smooth.spline(x = df_green$maturity_years, y = df_green$diff, spar = 1.3)
fit_conv  <- smooth.spline(x = df_conv$maturity_years,  y = df_conv$diff,  spar = 1.3)

# 7) Predict on a maturity grid
maturity_grid <- seq(
  from = min(df_merged$maturity_years),
  to   = max(df_merged$maturity_years),
  length.out = 200
)

pred_green <- predict(fit_green, x = maturity_grid)
pred_conv  <- predict(fit_conv,  x = maturity_grid)

df_spline_green <- data.frame(
  maturity      = pred_green$x,
  smoothed_diff = pred_green$y,
  bond_type     = "Green"
)
df_spline_conv <- data.frame(
  maturity      = pred_conv$x,
  smoothed_diff = pred_conv$y,
  bond_type     = "Conventional"
)
df_spline_all <- rbind(df_spline_green, df_spline_conv)

# 8) Plot raw points + smooth lines
ggplot() +
  geom_point(
    data = df_merged,
    aes(x = maturity_years, y = diff, color = factor(is_green)),
    alpha = 0.4
  ) +
  geom_line(
    data = df_spline_all,
    aes(x = maturity, y = smoothed_diff, color = bond_type),
    size = 1
  ) +
  geom_hline(yintercept = 0, linetype = "dashed") +
  labs(
    title = "Distance from ECB Yield Curve (Bond YTM - ECB) vs. Maturity - spar = 1.3",
    x     = "Maturity (years)",
    y     = "Spread (pct points)",
    color = "Bond Type"
  ) +
  theme_minimal()
```

# Here we use Boostraping to extract the zero coupon bonds use for the Nelson-Siegel fitting :

```{r}

df_grouped <- df_subset %>%
  mutate(maturity_rounded = round(maturity_years, 2)) %>%
  group_by(maturity_rounded) %>%
  summarize(
    maturity_years = mean(maturity_years),       # average actual maturity
    last_price     = mean(last_price, na.rm = TRUE),  # average price
    Coupon    = mean(Coupon, na.rm = TRUE), # average coupon
    .groups = "drop"
  )

bootstrap_zero_coupon_noninteger <- function(df, face_value = 100) {
  # df must have columns: maturity_years, last_price, coupon_rate
  # Already aggregated so 1 row per unique maturity
  # Sort ascending by maturity
  df <- df %>% arrange(maturity_years)

  # We'll store discount_factor and zero_rate
  df$discount_factor <- NA_real_
  df$zero_rate       <- NA_real_

  # Keep a list or data frame of (time, DF) we have solved so far
  known_times <- numeric(0)
  known_dfs   <- numeric(0)

  # Helper: linear interpolation of DF(t)
  get_df <- function(t) {
    # If t == 0, define DF(0) = 1
    if (abs(t) < 1e-12) return(1)
    # If we already solved DF(t) exactly, return it
    if (t %in% known_times) {
      return(known_dfs[which(known_times == t)])
    }
    # If t < min(known_times), we can't discount. Return NA or extrapolate
    if (t < min(known_times)) {
      # naive extrapolation
      return(NA_real_)
    }
    # If t > max(known_times), we can't discount that time either
    # but let's do a naive extrapolation
    if (t > max(known_times)) {
      return(NA_real_)
    }
    # Otherwise, find nearest times for interpolation
    # e.g. t1 < t < t2
    all_times <- sort(known_times)
    idx <- which(all_times > t)[1]
    t2 <- all_times[idx]
    t1 <- all_times[idx - 1]
    df2 <- known_dfs[which(known_times == t2)]
    df1 <- known_dfs[which(known_times == t1)]

    # linear interpolation in [t1, t2]
    w <- (t - t1) / (t2 - t1)
    df_t <- df1 + w * (df2 - df1)
    return(df_t)
  }

  for (i in seq_len(nrow(df))) {
    maturity <- df$maturity_years[i]
    price    <- df$last_price[i]
    c_rate   <- df$Coupon[i]
    coupon   <- face_value * c_rate  # annual coupon in currency

    # Identify coupon payment times: integer years from 1..floor(maturity)
    # plus a final payment at maturity (which might be fractional)
    int_mats <- seq_len(floor(maturity))  # e.g. 1,2,..., floor(2.7)=2
    # partial leftover
    frac_part <- maturity - floor(maturity)

    # Present value of known coupons
    pv_coupons <- 0

    # Discount each integer coupon
    for (t_int in int_mats) {
      # we must get DF(t_int) by interpolation or known
      df_tint <- get_df(t_int)
      if (is.na(df_tint)) {
        # We can't discount if not known => can't bootstrap in strict order
        # For simplicity, skip or set to 0. Or you might stop with an error.
        next
      }
      pv_coupons <- pv_coupons + coupon * df_tint
    }

    # For the final payment at maturity (which might be fractional),
    # the discount factor DF(maturity) is unknown => call it DF_x
    # The final payment is coupon + principal if maturity is integer,
    # or if there's a fractional leftover, you might pay partial coupon, etc.
    # We'll assume a FULL coupon at final maturity for simplicity.
    # So final payment = coupon + face_value.
    # Price = pv_coupons + (coupon + face_value)*DF_x

    # Solve for DF_x:
    # DF_x = (price - pv_coupons) / (coupon + face_value)
    # If the leftover fraction is truly partial, you might do:
    # final_payment = coupon * frac_part + face_value
    # Then DF_x = (price - pv_coupons)/(final_payment)
    final_payment <- coupon + face_value
    DF_x <- (price - pv_coupons) / final_payment

    # Store in df
    df$discount_factor[i] <- DF_x

    # Convert DF_x to zero rate
    # DF_x = 1/(1 + z)^(maturity) => z = (1/DF_x)^(1/maturity) - 1
    zc_rate <- (1 / DF_x)^(1 / maturity) - 1
    df$zero_rate[i] <- zc_rate

    # Add maturity, DF_x to known sets so we can discount future bonds
    known_times <- c(known_times, maturity)
    known_dfs   <- c(known_dfs, DF_x)
  }
  
    # reusing function from before
  df$YTM <- mapply(
    calc_ytm,
    price    = df$last_price,
    coupon_rate   = df$Coupon,
    maturity_years = df$maturity_years,
    MoreArgs = list(face_value = face_value, freq = 1)
  )

  return(df)
}

df_grouped <- df_subset %>%
  mutate(maturity_rounded = round(maturity_years, 1)) %>%
  group_by(maturity_rounded) %>%
  summarize(
    maturity_years = mean(maturity_years),
    last_price     = mean(last_price),
    Coupon         = mean(Coupon),
    .groups = "drop"
  ) %>%
  arrange(maturity_years)

# 2) Bootstrap
df_boot <- bootstrap_zero_coupon_noninteger(df_grouped)

df_boot
```

```{r}

plot(df_boot$maturity_years, df_boot$zero_rate, 
     pch=19, col="red", 
     main="Scatter Plot: Zero Coupon Rates vs Maturity",
     xlab="Maturity (Years)", ylab="Zero Coupon Rate (%)",
     xlim=c(0, 20), ylim=c(0, 10))  # Limite les axes
grid()
```

```{r}
#### YTM VS MATURITY 

ggplot(df_boot, aes(x = maturity_years)) +
  geom_point(aes(y = zero_rate, color = "Zero Coupon Rate"), size = 1) +
  geom_point(aes(y = YTM * 100,color = "Bond YTM"), size = 1) +
  labs(
    title = "Comparing Zero-Coupon Curve vs. Bond YTM",
    x = "Maturity (Years)",
    y = "Yield / Rate (decimal)",
    color = "Rate Type"
  ) +
  theme_minimal()
```

### Creating the NS curve for all bonds

```{r}
library(YieldCurve)
library(xts)

# 2️adjust nelson siegelto zero coupon
NS_params <- Nelson.Siegel(df_boot$zero_rate, df_boot$maturity_years)

# 3 check that the result is a matrix (needed for the followiong function)
NS_params <- matrix(NS_params, nrow = 1)  # S'assurer que c'est une matrice 1 ligne, 4 colonnes

# 4 convert into xts (if needed)
NS_params_xts <- xts(NS_params, order.by=Sys.Date())
# 6⃣ results
print(NS_params_xts)

NSrates_fitted <- NSrates(NS_params_xts, df_boot$maturity_years)
```

```{r}

### Plot the curve
plot(df_boot$maturity_years, df_boot$zero_coupon_rates, 
     main="Fitting Nelson-Siegel Yield Curve",
     xlab="Maturity (years)", ylab="Yield (%)",
     pch=19, col="blue", xlim=c(0, 20), ylim=c(0, 10))  # Suppression de type="o" pour avoir uniquement un scatter

lines(df_boot$maturity_years, NSrates_fitted, col="red", lwd=2.5)
legend("topleft",
       legend=c("Observed zero coupon rates", "Fitted Nelson-Siegel yield curve"),
       col=c("blue", "red"), pch=c(19, NA), lty=c(NA, 1), lwd=2.5)
grid()
rmse <- sqrt(mean((df_boot$zero_rate - NSrates_fitted)^2))
print(rmse)
summary(df_boot$zero_rate)
```

Double checking data passed to plot.

```{r}

df_boot_NS <- df_boot[, c("maturity_years", "zero_rate", "YTM")]
print(head(df_boot_NS))
```

# NS Curve on whole data set

```{r}

# per date we take the last available price
df_grouped_NS <- df_for_matching %>%
  arrange(WKN, desc(Date)) %>%
  group_by(WKN) %>%
  slice(1) %>%  
  ungroup()

df_grouped_NS <- df_grouped_NS %>%
  mutate(maturity_rounded = round(maturity_years, 1)) %>%
  group_by(maturity_rounded) %>%
  summarize(
    maturity_years = mean(maturity_years),
    last_price     = mean(last_price),
    Coupon         = mean(Coupon),
    .groups = "drop"
  ) %>%
  arrange(maturity_years)

# 2) Bootstrap
df_NS <- bootstrap_zero_coupon_noninteger(df_grouped_NS)
df_NS

# There are some outliers we remove, the calculation of the zero coupon rates goes wrong at some points
df_NS <- df_NS |> filter(zero_rate <= 5.00)

ggplot(df_NS, aes(x = maturity_years)) +
  geom_point(aes(y = zero_rate, color = "Zero Coupon Rate"), size = 1) +
  geom_point(aes(y = YTM * 100,color = "Bond YTM"), size = 1) +
  labs(
    title = "Comparing Zero-Coupon Curve vs. Bond YTM",
    x = "Maturity (Years)",
    y = "Yield / Rate (decimal)",
    color = "Rate Type"
  ) +
  theme_minimal()
```

Still not great, but we visualise our curve.

```{r}

# 2️adjust nelson siegelto zero coupon
NS_params <- Nelson.Siegel(df_NS$zero_rate, df_NS$maturity_years)

# 3 check that the result is a matrix (needed for the followiong function)
NS_params <- matrix(NS_params, nrow = 1)  # S'assurer que c'est une matrice 1 ligne, 4 colonnes

# 4 convert into xts (if needed)
NS_params_xts <- xts(NS_params, order.by=Sys.Date())
# 6⃣ results
print(NS_params_xts)

NSrates_fitted <- NSrates(NS_params_xts, df_NS$maturity_years)

### Plot the curve
plot(df_NS$maturity_years, df_NS$zero_coupon_rates, 
     main="Fitting Nelson-Siegel Yield Curve",
     xlab="Maturity (years)", ylab="Yield (%)",
     pch=19, col="blue", xlim=c(0, 20), ylim=c(0, 10))  # Suppression de type="o" pour avoir uniquement un scatter

lines(df_NS$maturity_years, NSrates_fitted, col="red", lwd=2.5)
legend("topleft",
       legend=c("Observed zero coupon rates", "Fitted Nelson-Siegel yield curve"),
       col=c("blue", "red"), pch=c(19, NA), lty=c(NA, 1), lwd=2.5)
grid()
rmse <- sqrt(mean((df_NS$zero_rate - NSrates_fitted)^2))
```

Our curve is inverted and there seems to be an issue with the parameters.
