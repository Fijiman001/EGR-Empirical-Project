---
title: "Project - Data part"
author: "Alexander Koehler"
format:
  html:
    highlight: espresso
    code-copy: true
    df-print: paged
    number-sections: true
    toc: true
    toc_depth: 3
    toc_float: yes
  pdf:
    number-sections: true
    toc: true
    toc_depth: 3
    toc_float: yes
execute: 
  cache: true
  warning: false
fontsize: 11pt
---

```{r, echo = FALSE, warning = FALSE, message = FALSE}
library(tidyverse)
library(tidyfinance)
library(scales)
library(RSQLite)
library(dbplyr)
library(RPostgres)
```

# Project - Data part

## Loading the campustat data

```{r}
# Timeframe of data
start_date <- ymd("1960-01-01")
end_date <- ymd("2023-12-31")

# Connector
wrds <- dbConnect(
  Postgres(),
  host = "wrds-pgdata.wharton.upenn.edu",
  dbname = "wrds",
  port = 9737,
  sslmode = "require",
  user = "alexanderkoehle",
  password = "hDZa#aQ4cB7fZ.z"
)


funda_db <- tbl(wrds, I("comp.funda"))

compustat <- funda_db |>
  filter(
    indfmt == "INDL" &
      datafmt == "STD" & 
      consol == "C" &
      curcd == "USD" &
      datadate >= start_date & datadate <= end_date
  ) |>
  select(
    gvkey, # Firm identifier
    tic,
    datadate, # Date of the accounting data
    seq, # Stockholders' equity
    ceq, # Total common/ordinary equity
    at, # Total assets
    lt, # Total liabilities
    txditc, # Deferred taxes and investment tax credit
    txdb, # Deferred taxes
    itcb, # Investment tax credit
    pstkrv, # Preferred stock redemption value
    pstkl, # Preferred stock liquidating value
    pstk, # Preferred stock par value
    capx, # Capital investment
    oancf, # Operating cash flow
    sale,  # Revenue
    cogs, # Costs of goods sold
    xint, # Interest expense
    xsga # Selling, general, and administrative expenses
  ) |>
  collect()
```

After downloading the data, we can look at it

```{r}
glimpse(compustat)
head(compustat)
```

## Selecting 5 companies for now

to simplify our data processing, we select only 5 companies for now, along with 1 defaulted one like enron

```{r}
# we only keep the following companies for now
# 001690	AAPL
# 005073	GM
# 006066	IBM
# 012141	MSFT
# 006127	ENRNQ

df_5 <- compustat |> 
  filter(
    gvkey == "001690"|
    gvkey == "005073"|
    gvkey == "006066"|
    gvkey == "012141"|
    gvkey == "006127"
)

glimpse(df_5)
```

## Loading CRSP data

code from tidyfinance book

```{r}
dsf_db <- tbl(wrds, I("crsp.dsf_v2"))
stksecurityinfohist_db <- tbl(wrds, I("crsp.stksecurityinfohist"))
# 
# factors_ff3_daily <- tbl(tidy_finance, "factors_ff3_daily") |>
#   collect()

permnos <- stksecurityinfohist_db |>
  distinct(permno) |> 
  pull(permno)

batch_size <- 500
batches <- ceiling(length(permnos) / batch_size)

for (j in 1:batches) {
  
  permno_batch <- permnos[
    ((j - 1) * batch_size + 1):min(j * batch_size, length(permnos))
  ]

  crsp_daily_sub <- dsf_db |>
    filter(permno %in% permno_batch) |> 
    filter(dlycaldt >= start_date & dlycaldt <= end_date) |> 
    inner_join(
      stksecurityinfohist_db |>
        filter(sharetype == "NS" & 
                securitytype == "EQTY" & 
                securitysubtype == "COM" & 
                usincflg == "Y" & 
                issuertype %in% c("ACOR", "CORP") & 
                primaryexch %in% c("N", "A", "Q") &
                conditionaltype %in% c("RW", "NW") &
                tradingstatusflg == "A") |> 
        select(permno, secinfostartdt, secinfoenddt),
      join_by(permno)
    ) |>
    filter(dlycaldt >= secinfostartdt & dlycaldt <= secinfoenddt)  |> 
    select(permno, date = dlycaldt, ret = dlyret) |>
    collect() |>
    drop_na()

  # if (nrow(crsp_daily_sub) > 0) {
  #   
  #   crsp_daily_sub <- crsp_daily_sub |>
  #     left_join(factors_ff3_daily |>
  #       select(date, rf), join_by(date)) |>
  #     mutate(
  #       ret_excess = ret - rf,
  #       ret_excess = pmax(ret_excess, -1)
  #     ) |>
  #     select(permno, date, ret, ret_excess)
  # 
  #   dbWriteTable(
  #     tidy_finance,
  #     "crsp_daily",
  #     value = crsp_daily_sub,
  #     overwrite = ifelse(j == 1, TRUE, FALSE),
  #     append = ifelse(j != 1, TRUE, FALSE)
  #   )
  # }

  message("Batch ", j, " out of ", batches, " done (", percent(j / batches), ")\n")
}
```

## Merging with CRSP

```{r}
# creating link
ccmxpf_linktable_db <- tbl(wrds, I("crsp.ccmxpf_linktable"))

# linking table contains links between CRSP and Compustat identifiers from various approaches.
ccmxpf_linktable <- ccmxpf_linktable_db |>
  filter(linktype %in% c("LU", "LC") &
    linkprim %in% c("P", "C") &
    usedflag == 1) |>
  select(permno = lpermno, gvkey, linkdt, linkenddt) |>
  collect() |>
  mutate(linkenddt = replace_na(linkenddt, today()))

# We use these links to create a new table with a mapping between stock identifier, firm identifier, and month. We then add these links to the Compustat gvkey to our monthly stock data.
ccm_links <- crsp_monthly |>
  inner_join(ccmxpf_linktable, 
             join_by(permno), relationship = "many-to-many") |>
  filter(!is.na(gvkey) & 
           (date >= linkdt & date <= linkenddt)) |>
  select(permno, gvkey, date)

# Merging
df <- df_5 |>
  left_join(ccm_links, join_by(permno, date))
```

or we use the tidyfinance package

```{r}
ccm_links <- download_data(type = "wrds_ccm_links")
```

## Merging with Lopucki

## Building Y

## Winsorizing

## Lagging data

## Seperating in Train and Test
